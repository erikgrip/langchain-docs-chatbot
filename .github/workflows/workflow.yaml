
on: [push]

jobs:
    test:
      runs-on: ubuntu-latest

      defaults:
        run:
          shell: bash -el {0}

      steps:
        - uses: actions/checkout@v3
        - uses: actions/setup-python@v4
          with:
            python-version: 3.10.6

        - name: Get full Python version
          id: full-python-version
          run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")
            
        - name: Bootstrap poetry
          run: curl -sSL https://install.python-poetry.org | python - -y
  
        - name: Configure poetry
          run: poetry config virtualenvs.in-project true
  
        - name: Set up cache
          uses: actions/cache@v3
          id: cache
          with:
            path: .venv
            key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
  
        - name: Ensure cache is healthy
          if: steps.cache.outputs.cache-hit == 'true'
          run: |
            # `timeout` is not available on macOS, so we define a custom function.
            [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }
  
            # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
            timeout 10s poetry run pip --version || rm -rf .venv
  
        - name: Check lock file
          run: poetry lock --check
  
        - name: Install dependencies
          run: poetry install --with dev
        
        - name: Test
          run: PYTHONPATH=. poetry run pytest

        - name: Lint
          run: poetry run bash tasks/lint.sh

